                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f61802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 
                            | # Name: Li Tianyu
                            | # ID: 2200013188
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # I rewrite the whole Y86 code
                            | # First decide whether len < 4, if so then go to the lessthan4 part
                            | # Then run the unrolled 4 * 1 loop
                            | # the lessthan4 part can also be used to handle things after the loop
                            | # Lrx is for 'Loop remains x elements', rx for the same
                            | #
                            | # Also, I add IADDQ instruction into the Y86 ISA, which reduces instruction number
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | 	xorq %rax, %rax
0x034: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x03e: 722601000000000000   | 	jl lessthan4
0x047:                      | Loop:
0x047: c0f20400000000000000 | 	iaddq $4, %rdx
0x051: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x05b: 62aa                 | 	andq %r10, %r10
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x067: 717a00000000000000   | 	jle Lr2
0x070: c0f00100000000000000 | 	iaddq $1, %rax
0x07a:                      | Lr2:
0x07a: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x084: 62aa                 | 	andq %r10, %r10
0x086: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x090: 71a300000000000000   | 	jle Lr1
0x099: c0f00100000000000000 | 	iaddq $1, %rax
0x0a3:                      | Lr1:
0x0a3: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0ad: 62aa                 | 	andq %r10, %r10
0x0af: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b9: 71cc00000000000000   | 	jle Lr0
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax
0x0cc:                      | Lr0:
0x0cc: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x0d6: c0f72000000000000000 | 	iaddq $32, %rdi
0x0e0: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x0ea: c0f62000000000000000 | 	iaddq $32, %rsi
0x0f4: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x0fe: 62aa                 | 	andq %r10, %r10
0x100: 711301000000000000   | 	jle test
0x109: c0f00100000000000000 | 	iaddq $1, %rax
0x113:                      | test:
0x113: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x11d: 754700000000000000   | 	jge Loop
0x126:                      | lessthan4:
0x126: c0f20400000000000000 | 	iaddq $4, %rdx
0x130: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x13a: 71da01000000000000   | 	jle Done
0x143: 62aa                 | 	andq %r10, %r10
0x145: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x14f: 716201000000000000   | 	jle r2
0x158: c0f00100000000000000 | 	iaddq $1, %rax
0x162:                      | r2:
0x162: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x16c: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x176: 71da01000000000000   | 	jle Done
0x17f: 62aa                 | 	andq %r10, %r10
0x181: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x18b: 719e01000000000000   | 	jle r1
0x194: c0f00100000000000000 | 	iaddq $1, %rax
0x19e:                      | r1:
0x19e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1a8: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x1b2: 71da01000000000000   | 	jle Done
0x1bb: 62aa                 | 	andq %r10, %r10
0x1bd: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x1c7: 71da01000000000000   | 	jle Done
0x1d0: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1da:                      | Done:
0x1da: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1db:                      | End:
                            | #/* $end ncopy-ys */
0x1db:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1e0:                      | 	.align 8
0x1e0:                      | src:
0x1e0: 0100000000000000     | 	.quad 1
0x1e8: feffffffffffffff     | 	.quad -2
0x1f0: fdffffffffffffff     | 	.quad -3
0x1f8: 0400000000000000     | 	.quad 4
0x200: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x210:                      | 	.align 16
0x210:                      | Predest:
0x210: fadebc0000000000     | 	.quad 0xbcdefa
0x218:                      | dest:
0x218: abefcd0000000000     | 	.quad 0xcdefab
0x220: abefcd0000000000     | 	.quad 0xcdefab
0x228: abefcd0000000000     | 	.quad 0xcdefab
0x230: abefcd0000000000     | 	.quad 0xcdefab
0x238:                      | Postdest:
0x238: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x240:                      | .align 8
                            | # Run time stack
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
                            | 
0x2c0:                      | Stack:
