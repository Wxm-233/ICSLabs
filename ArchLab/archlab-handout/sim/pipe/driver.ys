#######################################################################
# Test for copying block of size 20;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $20, %rdx		# src and dst have 20 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 
# Name: Li Tianyu
# ID: 2200013188
#
# Describe how and why you modified the baseline code.
#
# I rewrite the whole Y86 code
# First decide whether len < 6, if so then go to the lessthan6 part
# Then run the unrolled 6 * 1 loop
# the lessthan6 part can also be used to handle things after the loop
# Lrx is for 'Loop remains x elements', rx for the same
# Also, I add IADDQ instruction into the Y86 ISA, which reduces instruction number
# modified some branches to make it easier to be predicted
# binary search is used
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# xorq %rax, %rax
	iaddq $-10, %rdx
	jl restjudge
Loop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp

	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)	
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	rmmovq %rbp, 72(%rsi)

Lr1:
	andq %r8, %r8
	jle Lr2
	iaddq $1, %rax
Lr2:	
	andq %r9, %r9
	jle Lr3
	iaddq $1, %rax
Lr3:	
	andq %r10, %r10
	jle Lr4
	iaddq $1, %rax
Lr4:
	andq %r11, %r11
	jle Lr5
	iaddq $1, %rax
Lr5:
	andq %r12, %r12
	jle Lr6
	iaddq $1, %rax
Lr6:
	andq %r13, %r13
	jle Lr7
	iaddq $1, %rax
Lr7:
	andq %r14, %r14
	jle Lr8
	iaddq $1, %rax
Lr8:
	andq %rcx, %rcx
	jle Lr9
	iaddq $1, %rax
Lr9:
	andq %rbx, %rbx
	jle Lr10
	iaddq $1, %rax
Lr10:
	andq %rbp, %rbp
	jle loopend
	iaddq $1, %rax

loopend:
	iaddq $80, %rdi
	iaddq $80, %rsi
	
test:
	iaddq $-10, %rdx
	jg Loop

restjudge:
	iaddq $7, %rdx
	jl searchleft
	jg searchright
	jmp r3
searchright:
	iaddq $-3, %rdx
	jg search789
	je r6
	iaddq $1, %rdx
	je r5
	jmp r4

searchleft:
	iaddq $2, %rdx
	je r1
	iaddq $-1, %rdx
	je r2
	ret
search789:
	iaddq $-2, %rdx
	jl r7
	je r8
lessthan10:
r9:
	mrmovq 64(%rdi), %rbx
	andq %rbx, %rbx
	rmmovq %rbx, 64(%rsi)
	jle r8
	iaddq $1, %rax
r8:
	mrmovq 56(%rdi), %rcx
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle r7
	iaddq $1, %rax
r7:
	mrmovq 48(%rdi), %r13
	andq %r13, %r13
	rmmovq %r13, 48(%rsi)
	jle r6
	iaddq $1, %rax
r6:
	mrmovq 40(%rdi), %r14
	andq %r14, %r14
	rmmovq %r14, 40(%rsi)
	jle r5
	iaddq $1, %rax
r5:
	mrmovq 32(%rdi), %r8
	andq %r8, %r8
	rmmovq %r8, 32(%rsi)
	jle r4
	iaddq $1, %rax
r4:
	mrmovq 24(%rdi), %r9
	andq %r9, %r9
	rmmovq %r9, 24(%rsi)
	jle r3
	iaddq $1, %rax
r3:
	mrmovq 16(%rdi), %r10
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle r2
	iaddq $1, %rax
r2:
	mrmovq 8(%rdi), %r11
	andq %r11, %r11
	rmmovq %r11, 8(%rsi)
	jle r1
	iaddq $1, %rax
r1:
	mrmovq (%rdi), %r12
	andq %r12, %r12
	rmmovq %r12, (%rsi)
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 5.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $5,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $20,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad -6
	.quad 7
	.quad -8
	.quad -9
	.quad -10
	.quad -11
	.quad -12
	.quad -13
	.quad -14
	.quad 15
	.quad 16
	.quad 17
	.quad -18
	.quad -19
	.quad -20
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
