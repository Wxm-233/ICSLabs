#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 
# Name: Li Tianyu
# ID: 2200013188
#
# Describe how and why you modified the baseline code.
#
# I rewrite the whole Y86 code
# First decide whether len < 6, if so then go to the lessthan6 part
# Then run the unrolled 6 * 1 loop
# the lessthan6 part can also be used to handle things after the loop
# Lrx is for 'Loop remains x elements', rx for the same
# Also, I add IADDQ instruction into the Y86 ISA, which reduces instruction number
# modified some branches to make it easier to be predicted
# binary search is used
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# xorq %rax, %rax
	iaddq $-10, %rdx
	jge Loop
	jmp restjudge

Loop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp

	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)	
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	rmmovq %rbp, 72(%rsi)

Lr1:
	andq %r8, %r8
	jle Lr2
	iaddq $1, %rax
Lr2:	
	andq %r9, %r9
	jle Lr3
	iaddq $1, %rax
Lr3:	
	andq %r10, %r10
	jle Lr4
	iaddq $1, %rax
Lr4:
	andq %r11, %r11
	jle Lr5
	iaddq $1, %rax
Lr5:
	andq %r12, %r12
	jle Lr6
	iaddq $1, %rax
Lr6:
	andq %r13, %r13
	jle Lr7
Lr7:
	andq %r14, %r14
	jle Lr8
	iaddq $1, %rax
Lr8:
	andq %rcx, %rcx
	jle Lr9
	iaddq $1, %rax
Lr9:
	andq %rbx, %rbx
	jle Lr10
	iaddq $1, %rax
Lr10:
	andq %rbp, %rbp
	jle loopend
	iaddq $1, %rax

loopend:
	iaddq $80, %rdi
	iaddq $80, %rsi
	
test:
	iaddq $-10, %rdx
	jg Loop

restjudge:
	iaddq $7, %rdx
	jl searchleft
	jg searchright
	jmp r3
searchright:
	iaddq $-3, %rdx
	jg search789
	je r6
	iaddq $1, %rdx
	je r5
	jmp r4

searchleft:
	iaddq $2, %rdx
	je r1
	iaddq $-1, %rdx
	je r2
	ret
search789:
	iaddq $-2, %rdx
	jl r7
	je r8
lessthan10:
r9:
	mrmovq 64(%rdi), %rbx
	andq %rbx, %rbx
	rmmovq %rbx, 64(%rsi)
	jle r8
	iaddq $1, %rax
r8:
	mrmovq 56(%rdi), %rcx
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle r7
	iaddq $1, %rax
r7:
	mrmovq 48(%rdi), %r13
	andq %r13, %r13
	rmmovq %r13, 48(%rsi)
	jle r6
	iaddq $1, %rax
r6:
	mrmovq 40(%rdi), %r14
	andq %r14, %r14
	rmmovq %r14, 40(%rsi)
	jle r5
	iaddq $1, %rax
r5:
	mrmovq 32(%rdi), %r8
	andq %r8, %r8
	rmmovq %r8, 32(%rsi)
	jle r4
	iaddq $1, %rax
r4:
	mrmovq 24(%rdi), %r9
	andq %r9, %r9
	rmmovq %r9, 24(%rsi)
	jle r3
	iaddq $1, %rax
r3:
	mrmovq 16(%rdi), %r10
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle r2
	iaddq $1, %rax
r2:
	mrmovq 8(%rdi), %r11
	andq %r11, %r11
	rmmovq %r11, 8(%rsi)
	jle r1
	iaddq $1, %rax
r1:
	mrmovq (%rdi), %r12
	andq %r12, %r12
	rmmovq %r12, (%rsi)
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
